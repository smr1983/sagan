%YAML 1.1
---

#  ,-._,-.  Sagan configuration file [http://sagan.quadrantsec.com]
#  \/)"(\/  Champ Clark III & The Quadrant Infosec Team: http://quadrantsec.com
#   (_o_)   Copyright (C) 2009-2020 Quadrant Information Security., et al.
#   /   \/)   
#  (|| ||)    
#   oo-oo    


##############################################################################
# This section defines variables commonly used by the Sagan core,  rules 
# and configuration.  These variables need to be at the head of the sagan.yaml
# so that they can be used later in the configuration. 
##############################################################################

vars:

  # 'Core' variables used by Sagan.

  sagan-groups: 

    FIFO: "/var/sagan/fifo/sagan.fifo"
    RULE_PATH: "/usr/local/etc/sagan-rules"
    LOCKFILE: "/var/run/sagan/sagan.pid"
    LOG_PATH: "/var/log/sagan"	

  # HOME_NET and EXTERNAL_NET function similar to Suricata/Snort.  However, 
  # it's rare you'll want to set them.  In most situations leaving it set
  # to "any" is best. 

  address-groups:

    HOME_NET: "any"
    EXTERNAL_NET: "any"

  # Common ports used by common protocols.  These variables are used by 
  # rule sets. 

  port-groups:

    SSH_PORT: 22
    HTTP_PORT: 80
    HTTPS_PORT: 443
    TELNET_PORT: 23
    DNS_PORT: 53
    SNMP_PORT: 161
    POP3_PORT: 110
    IMAP_PORT: 143
    SMTP_PORT: 25
    MYSQL_PORT: 3306
    MSSQL_PORT: 1433
    NTP_PORT: 123
    OPENVPN_PORT: 1194
    PPTP_PORT: 1723
    FTP_PORT: 21
    RSYNC_PORT: 873
    SQUID_PORT: 3128

  # If you are using the -geoip rule sets & Sagan is compile with Maxmind 
  # GeoIP2 support (https://github.com/maxmind/libmaxminddb/releases), 
  # you'll want to define your $HOME_COUNTRY. ISO GeoIP country codes can
  # be found at http://dev.maxmind.com/geoip/legacy/codes/iso3166/

  geoip-groups: 

    HOME_COUNTRY: "US,CA"

  # If you want to use -aetas, also know as time based rule sets,  you'll
  # want to define the $SAGAN_HOURS and $SAGAN_DAYS variables. $SAGAN_HOURS is
  # considered "normal" hours in a 24 hour clock format from "start time" to 
  # "end time".  $SAGAN_DAYS is the day of the week (0 == Sunday -> 
  # Saturday).  For more information,  see: 
  #
  # https://wiki.quadrantsec.com/twiki/bin/view/Main/SaganRuleReference

  aetas-groups: 

    SAGAN_HOURS: "0700-1800"
    SAGAN_DAYS: "12345"

  # Variable for the max number of entries Sagan will retain via IPC. 

  mmap-groups:

    MMAP_DEFAULT: 10000

  # Miscellaneous variables used by rules.

  misc-groups: 

    CREDIT_CARD_PREFIXES: "4,34,37,300,301,302,303,304,305,2014,2149,309,36,38,39,54,55,6011,6221,6222, 6223,6224,6225,6226,\ 
                           6227,6228,6229,644,645,646,647,648,649,65,636,637,638,639,22,23,24,25,26,27,51,52,53,53,55"

    RFC1918: "10.,192.168.,172.16.,172.17.,172.18.,172.19.,172.20.,172.21.,172.22.,172.23.,172.24.,172.25.,172.26.,172.27.,\
               172.28.,172.29.,172.30.,172.31."

    # $WINDOWS_DOMAINS is used by some Windows rule sets to determine if a log
    # message contains or does not contain a valid DOMAIN for your organization.
    # For more information, see: 
    #
    # https://quadrantsec.com/about/blog/detecting_pass_the_hash_attacks_with_sagan_in_real_time/

    WINDOWS_DOMAINS: "MYCOMPANYDOMAIN,EXAMPLEDOMAIN,ANOTHER_DOMAIN"

    # Known valid Microsoft PSExec MD5 sums.  Versions v1.98, v2.00, v2.10, v2.11, v2.11 (2016).

    PSEXEC_MD5: "CD23B7C9E0EDEF184930BC8E0CA2264F0608BCB3, 9A46E577206D306D9D2B2AB2F72689E4F5F38FB1,\
                 2EDEEFB431663F20A36A63C853108E083F4DA895,B5C62D79EDA4F7E4B60A9CAA5736A3FDC2F1B27E,\
                 A7F7A0F74C8B48F1699858B3B6C11EDA"


##############################################################################
# Sagan "core" configuration settings. 
##############################################################################

sagan-core:

  # Settings used by the Sagan's core engine.

  core:

    sensor-name: "default_sensor_name"   # Unique name for this sensor (no spaces)
    cluster-name: "default_cluster_name" # Cluster name (no spaces)
    default-host: 192.168.2.1
    default-port: 514
    default-proto: udp
    dns-warnings: disabled
    source-lookup: disabled		
    fifo-size: 1048576		# System must support F_GETPIPE_SZ/F_SETPIPE_SZ. 
    classification: "$RULE_PATH/classification.config"
    reference: "$RULE_PATH/reference.config"
    gen-msg-map: "$RULE_PATH/gen-msg.map"
    protocol-map: "$RULE_PATH/protocol.map"
    chown-fifo: yes             # Change ownership of FIFO to the "sagan" user.
    xbit-storage: mmap          # "redis" or "mmap"

    max-threads: 100            # Increase this if the system is under heavy load.


    # Sagan can sends logs in "batches" for performance reasons. In most 
    # environments, you'll likely want to set this to 10.  For more busy
    # environments you may want to set this to 100.  This should allow Sagan
    # to comfortably process up to 50k events per/second (EPS).  If you are 
    # looking at rates higher than 50k EPS,  please read:
    #
    # https://sagan.readthedocs.io/en/latest/high-performance.html
    #
    # The default setting is 1 which doesn't lead to the best performance. 
    # If you get more than 10 events per/second,  you might want to increase
    # the batch-size to 10.

    batch-size: 1

    # Controls how data is read from the FIFO. The "pipe" setting is the traditional 
    # way Sagan reads in events and is default. "json" is more flexible and 
    # will become the default in the future. If "pipe" is set, "json-map"
    # and "json-software" have no function.

    input-type: pipe                       # pipe or json
    json-map: "$RULE_PATH/json-input.map"  # mapping file if input-type: json
    json-software: syslog-ng               # by "software" type. 

    # "parse-json-message" allows Sagan to detect and decode JSON within a 
    # syslog "message" field.  If a decoder/mapping is found,  then Sagan will
    # extract the JSON values within the messages.  The "parse-json-program"
    # tells Sagan to start looking for JSON within the "program" field.  Some
    # systems (i.e. - Splunk) start JSON within the "program" field and
    # into the "message" field.  This option tells Sagan to "append" the 
    # strings together (program+message) and then decode.  The "json-message-map"
    # tells Sagan how to decode JSON values when they are encountered.

    parse-json-message: disabled
    parse-json-program: disabled
    json-message-map: "$RULE_PATH/json-message.map"

  # This controls how the "parse_src_ip" and "parse_dst_ip" function within a rule. 
   
  parse-ip:
    ipv6: enabled			# Parse IPv6 Addresses
    ipv4-mapped-ipv6: disabled		# Map ffff::192.168.1.1 back to 192.168.1.1

  # Redis configuration.  Redis can be used to act as a global storage engine for
  # flexbits.  This allows Sagan to "share" flexbit data across a network # infrastructure.
  # This is experimental! 

  redis-server:

    enabled: no
    server: 127.0.0.1
    port: 6379
    #password: "mypassword"  # Comment out to disable authentication.
    writer_threads: 10

  # Sagan creates "memory mapped" files to keep track of flexbits, thresholds, 
  # and afters.  This allows Sagan to "remember" threshold, flexbits and after
  # data between system restarts (including system reboots!). 
  
  # This also allows Sagan to share information with other Sagan processes.
  # For example, if one Sagan instance is monitoring "Linux" logs & another is
  # monitoring "Windows" logs, Sagan can communicate between the two Sagan 
  # processes using these memory mapped files. A "flexbit" that is "set" by the
  # "Linux" process accessible and "known" to the Windows instance.

  # The storage is pre-allocated when the memory mapped files are created
  # The values can be increased/decreased by altering the $MMAP_DEFAULT
  # variable. 10,000 entries is the system default.

  # The default ipc-directory is /dev/shm (ram drive) for performance reasons.

  mmap-ipc: 

    ipc-directory: /dev/shm
    xbit: $MMAP_DEFAULT
    flexbit: $MMAP_DEFAULT
    after: $MMAP_DEFAULT
    threshold: $MMAP_DEFAULT
    track-clients: $MMAP_DEFAULT

  # A "short circuit" list of terms or strings to ignore.  If the the string
  # is found in pre-processing a log message, it will be dropped.  This can
  # be useful when you have log messages repeating without any useful 
  # information & you don't want to burn CPU cycles analyzing them.  Items 
  # that match will be "short circuit" in pre-processing before rules & 
  # processors are applied. 

  ignore-list: 

    enabled: no
    ignore-file: "$RULE_PATH/sagan-ignore-list.txt"

  # Maxmind GeoIP2 support allows Sagan to categorize events by their country
  # code. For example; a rule can be created to track "authentication 
  # successes" & associate the country the successful login came from.  If the
  # successful login is from outside your country code,  via the $HOME_COUNTRY
  # variable, an alert can be generated.  Sagan will need to be compiled with 
  # --enable-geoip2 flag. 
  #
  # Maxmind GeoLite2 Free database:
  # http://dev.maxmind.com/geoip/geoip2/geolite2/
  #
  # Country code (ISO3166): 
  # http://dev.maxmind.com/geoip/legacy/codes/iso3166/
  #
  # More information about Sagan & GeoIP, see: 
  # https://quadrantsec.com/about/blog/detecting_adversary_with_sagan_geoip/

  geoip: 
   
    enabled: no
    country_database: "/usr/local/share/GeoIP2/GeoLite2-Country.mmdb"
    skip_networks: "8.8.8.8/32, 8.8.4.4/32"

  # Liblognorm is a fast sample-base log normalization library.  Sagan uses
  # this library to rapidly extract useful data (IP address, hashes, etc) from
  # log messages.  While this library is not required it is recommended that 
  # Sagan be built with liblognorm enabled.  For more information, see: 
  #
  # https://wiki.quadrantsec.com/bin/view/Main/LibLogNorm
  #
  # The normalize_rulebase are the samples to use to normalize log messages 
  # Sagan receives. 

  liblognorm: 
 
    enabled: yes
    normalize_rulebase: "$RULE_PATH/normalization.rulebase"

  # 'Plog',  the promiscuous syslog injector, allows Sagan to 'listen' on a
  # network interface and 'suck' UDP syslog message off the wire.  When a 
  # syslog packet is detected, it is injected into /dev/log.  This is based
  # on work by Marcus J. Ranum in 2004 with his permission.  
  #
  # For more information,  please see: 
  #
  # https://raw.githubusercontent.com/beave/sagan/master/src/sagan-plog.c

  plog: 

    enabled: no
    interface: eth0
    bpf: "port 514"
    log-device: /dev/log
    promiscuous: yes

##############################################################################
# Processors
##############################################################################

# "Processors" are functions that operate outside normal "rule sets".  

processors: 

  # The "tracking clients" processor keeps track of the systems (IP addresses), 
  # reporting to Sagan.  If Sagan stops receiving logs from a client for a 
  # specified amount of time ("timeout"), an alert/notification is created.  
  # With the # system comes back online,  another alert/notification is 
  # created. 

  - track-clients:
      enabled: no
      timeout: 1440		# In minutes

  # This records information about clients reporting to Sagan.  This can be useful
  # to keep track of when clients last sent data and the types of data they sent. 
  # The 'time' option sets how often Sagan should write out this data.  The 
  # 'interval' option set how often Sagan should record data (program and message
  # data) from the client. 
 
  - client-stats:
      enabled: no
      filename: "$LOG_PATH/eve.json"
      time: 30
      data-interval: 300
      max-clients: 1000

  # This reports on rule sets that have and have not "fired".  This can be 
  # useful in tuning Sagan. 

  - rule-tracking:
      enabled: yes
      console: disabled
      syslog: enabled
      time: 1440		# In minutes 

  # The "stats-json" writes statistical information in a JSON format.  This
  # format is similar to Suricata EVE/JSON stats output.  The option
  # "subtract_old_values" will subtract values from the previous execution.
  # This give you the statistics over the specified period of "time".  If
  # "subtract_old_values" is set to "false",  then each time "time" is 
  # reached,  the values are added to the previous one.  When "false", this
  # is how Suricata writes the data.

  - stats-json:
      enabled: no
      time: 1
      subtract_old_values: true
      filename: "$LOG_PATH/stats/stats.json"
 
  # The "perfmonitor" processor write statistical information every specified
  # number of seconds ("time") to a CSV file.  This data can be useful for 
  # tracking the performance of Sagan.  This data can also be used with 
  # RRDTool to generate graphs.  

  - perfmonitor:
      enabled: no
      time: 600
      filename: "$LOG_PATH/stats/sagan.stats"

  # The "blacklist" process reads in a list of hosts/networks that are
  # considered "bad".  For example, you might pull down a list like SANS
  # DShield (http://feeds.dshield.org/block.txt) for Sagan to use.  If Sagan
  # identifies any hosts/networks in a log message from the list, an alert
  # will be generated.  The list can be in a IP (192.168.1.1) or CIDR format
  # (192.168.1.0/24).  Rule identified as -blacklist.rules use this data.  
  # You can load multiple blacklists by separating them via comma.  For 
  # example; filename: "$RULE_PATH/list1.txt, $RULE_PATH/list2.txt". 

  - blacklist: 
      enabled: no
      filename: "$RULE_PATH/blacklist.txt"
 
  # The "bluedot" processor extracts information from logs (URLs, file hashes,
  # IP address) and queries the Quadrant Information Security "Bluedot" threat
  # intelligence database.  This database is 'closed' at this time.  For more 
  # information,  please contact Quadrant Information Security @ 1-800-538-9357
  # (+1-904-296-9100) or e-mail info@quadrantsec.com for more information.  
  # Rules identified with the -bluedot.rules extension use this data.
 
  - bluedot: 
      enabled: no
      device-id: "Device_ID"
      cache-timeout: 120
      categories: "$RULE_PATH/bluedot-categories.conf"

      max-ip-cache: 300000
      max-hash-cache: 10000
      max-url-cache: 20000
      max-filename-cache: 1000
      max-ja3-cache: 10000

      ip-queue: 100
      hash-queue: 100
      url-queue: 100
      filename-queue: 100
      ja3-queue: 100

      host: "bluedot.qis.io"
      ttl: 86400
      uri: "q.php?qipapikey=APIKEYHERE"

      skip_networks: "8.8.8.8/32, 8.8.4.4/32"


  # The "zeek-intel" (formally "bro-intel") processor allows Sagan to use 
  # threat intelligence data from the "Zeek (Bro) Intelligence Framework".  
  # Rules identified with the # -brointel.rules use this data.  For more information 
  # about this processor,  see: 
  #
  # https://quadrantsec.com/about/blog/using_sagan_with_bro_intelligence_feeds/
  # https://wiki.quadrantsec.com/bin/view/Main/SaganRuleReference#bro_intel_src_ipaddr_dst_ipaddr 
  # http://blog.bro.org/2014/01/intelligence-data-and-bro_4980.html
  # https://www.bro.org/sphinx-git/frameworks/intel.html
  #
  # A good aggregate source of Bro Intelligence data is at: 
  #
  # https://intel.criticalstack.com/

  - zeek-intel: 
      enabled: no
      filename: "/opt/critical-stack/frameworks/intel/master-public.bro.dat"

  # The 'dynamic_load' processor uses rule with the "dynamic_load" rule option
  # enabled. These rules tells Sagan to load additional rules when new log
  # traffic is detected.  For example,  if Sagan does not have 'proftpd.rules'
  # enabled but detects 'proftp' log traffic,  a dynamic rule can automatically
  # load the 'proftpd.rules' for you.  Dynamic detection rules are named
  # 'dynamic.rules' in the Sagan rule set.  The "sample-rate" limits amount of
  # CPU to dedicated to detection new logs. The "type" informs the process 
  # "what" to do.  Valid types are "dynamic_load" (load & alert when new rules
  #  are loaded), "log_only" (only writes detection to the sagan.log file) and
  # "alert" (create's an alert about new logs being detected). 

  - dynamic-load: 
      enabled: no
      sample-rate: 100		# How often to 'test for new samples. 
      type: dynamic_load	# What to do on detection of new logs.

##############################################################################
# Output formats.
##############################################################################

# "outputs" inform Sagan on how to handle data upon detection. 

outputs:

  # Experimental Code!!!
  #
  # WORK IN PROGRESS - Output in the Suricata EVE/Alert format. The 
  # "alerts" option sends only "alerts".  The "logs" option will send
  # all logs!

  # EVE alerts can be load into software like Elasticsearch and is a good 
  # replacement for "unified2" with software like "Meer".  For more 
  # information on Meer, Check out:
  #
  # https://github.com/beave/meer

  - eve-log:
      enabled: no
      interface: logs
      alerts: yes                     # Logs alerts
      alerts-base64: yes              # Encode payload in base64 (like Suricata)
      logs: no                        # Send all logs to EVE. 
      filename: "$LOG_PATH/eve.json"

  # The 'alert' output format allows Sagan to write alerts, in detail, in a 
  # traditional Snort style "alert log" ASCII format. 

  - alert:
      enabled: yes
      filename: "$LOG_PATH/alert.log"

  # The 'fast' output format allows Sagan to write alerts in a format similar
  # to Snort's 'fast' output format. 

  - fast:
      enabled: no
      filename: "$LOG_PATH/fast.log"

  # The 'smtp' output allows Sagan to e-mail alerts that trigger.  The rules 
  # you want e-mail need to contain the 'email' rule option and Sagan must
  # be compiled with libesmtp support.  

  - smtp: 
      enabled: no
      from: sagan-alert@example.com
      server: 192.168.0.1:25
      subject: "** Sagan Alert **"
 
  # The 'syslog' output allows Sagan to send alerts to syslog. The syslog 
  # output format used is exactly the same of Snorts.  This means that your 
  # SIEMs Snort log parsers should work with Sagan.

  - syslog: 
      enabled: no
      facility: LOG_AUTH
      priority: LOG_ALERT
      extra: LOG_PID

##############################################################################
# Rule sets! - "Arrgh Villains! Sagan neither takes nor gives mercy!"
##############################################################################

# It is unlikely you want to have _all_ rules enabled! You'll want to tailor 
# & enable rules for your specific needs!
 
rules-files: 

  #############################################################################
  # Dynamic rules - Only use if you have the 'dynamic_load' processor enabled #
  #############################################################################

  #- $RULE_PATH/dynamic.rules

  #############################################################################
  # GeoIP rules - Only use if you have $HOME_COUNTRY and 'geoip' core enabled #
  #############################################################################

  #- $RULE_PATH/cisco-geoip.rules
  #- $RULE_PATH/citrix-geoip.rules
  #- $RULE_PATH/courier-geoip.rules
  #- $RULE_PATH/f5-big-ip-geoip.rules
  #- $RULE_PATH/fatpipe-geoip.rules
  #- $RULE_PATH/fortinet-geoip.rules
  #- $RULE_PATH/imapd-geoip.rules
  #- $RULE_PATH/juniper-geoip.rules
  #- $RULE_PATH/openssh-geoip.rules
  #- $RULE_PATH/proftpd-geoip.rules
  #- $RULE_PATH/riverbed-geoip.rules
  #- $RULE_PATH/snort-geoip.rules
  #- $RULE_PATH/ssh-tectia-server-geoip.rules
  #- $RULE_PATH/vmware-geoip.rules
  #- $RULE_PATH/vsftpd-geoip.rules
  #- $RULE_PATH/windows-geoip.rules
  #- $RULE_PATH/windows-owa-geoip.rules
  #- $RULE_PATH/zimbra-geoip.rules

  #############################################################################
  # Aetas rules - Only use if $SAGAN_HOUR/$SAGAN_DAY is defined!              #
  #############################################################################

  #- $RULE_PATH/cisco-aetas.res
  #- $RULE_PATH/fatpipe-aetas.rules
  #- $RULE_PATH/fortinet-aetas.rules
  #- $RULE_PATH/juniper-aetas.rules
  #- $RULE_PATH/openssh-aetas.rules
  #- $RULE_PATH/proftpd-aetas.rules
  #- $RULE_PATH/riverbed-aetas.rules
  #- $RULE_PATH/ssh-tectia-server-aetas.rules
  #- $RULE_PATH/windows-aetas.rules

  #############################################################################
  # Malware rules - Rules useful for detecting malware.                       #
  #############################################################################

  #- $RULE_PATH/cisco-malware.rules
  #- $RULE_PATH/fortinet-malware.rules
  #- $RULE_PATH/nfcapd-malware.rules
  #- $RULE_PATH/proxy-malware.rules
  #- $RULE_PATH/windows-malware.rules

  #############################################################################
  # Blacklist rules - Make sure the 'blacklist' processor is enabled!         #
  #############################################################################

  #- $RULE_PATH/blacklist.rules
  #- $RULE_PATH/cisco-blacklist.rules
  #- $RULE_PATH/citrix-blacklist.rules
  #- $RULE_PATH/windows-blacklist.rules
  #- $RULE_PATH/windows-owa-blacklist.rules
  
  #############################################################################
  # Bro Intel rules - Make sure the 'bro-intel processor is enabled!          #
  #############################################################################

  #- $RULE_PATH/cisco-brointel.rules
  #- $RULE_PATH/citrix-brointel.rules
  #- $RULE_PATH/windows-brointel.rules
  #- $RULE_PATH/windows-owa-brointel.rules
  #- $RULE_PATH/bro-intel.rules

  #############################################################################
  # Bluedot rules - Make sure the 'bluedot' processor is enabled!             #
  #############################################################################

  #- $RULE_PATH/bluedot.rules
  #- $RULE_PATH/bro-bluedot.rules
  #- $RULE_PATH/cisco-bluedot.rules
  #- $RULE_PATH/citrix-bluedot.rules
  #- $RULE_PATH/courier-bluedot.rules
  #- $RULE_PATH/f5-big-ip-bluedot.rules
  #- $RULE_PATH/fatpipe-bluedot.rules
  #- $RULE_PATH/fortinet-bluedot.rules
  #- $RULE_PATH/imapd-bluedot.rules
  #- $RULE_PATH/juniper-bluedot.rules
  #- $RULE_PATH/openssh-bluedot.rules
  #- $RULE_PATH/proftpd-bluedot.rules
  #- $RULE_PATH/riverbed-bluedot.rules
  #- $RULE_PATH/snort-bluedot.rules
  #- $RULE_PATH/ssh-tectia-server-bluedot.rules
  #- $RULE_PATH/vmware-bluedot.rules
  #- $RULE_PATH/vsftpd-bluedot.rules
  #- $RULE_PATH/windows-bluedot.rules
  #- $RULE_PATH/windows-owa-bluedot.rules

  ################################################################################
  # Correlated rules - Rules that use xbits/flexbits to detect malicious behavor #
  ################################################################################

  - $RULE_PATH/cisco-correlated.rules
  - $RULE_PATH/citrix-correlated.rules
  - $RULE_PATH/courier-correlated.rules
  - $RULE_PATH/fatpipe-correlated.rules
  - $RULE_PATH/fortinet-correlated.rules
  - $RULE_PATH/imapd-correlated.rules
  - $RULE_PATH/openssh-correlated.rules
  - $RULE_PATH/ssh-tectia-server-correlated.rules
  - $RULE_PATH/vmware-correlated.rules
  - $RULE_PATH/vsftpd-correlated.rules
  - $RULE_PATH/windows-correlated.rules
  - $RULE_PATH/windows-owa-correlated.rules

  #############################################################################
  # Standard rules - Rules that do not require any dependencies.              #
  #############################################################################

  #- $RULE_PATH/as400.rules
  - $RULE_PATH/adtran.rules
  - $RULE_PATH/apache.rules
  - $RULE_PATH/apc-emu.rules
  - $RULE_PATH/arp.rules
  #- $RULE_PATH/artillery.rules
  - $RULE_PATH/asterisk.rules
  - $RULE_PATH/attack.rules
  - $RULE_PATH/barracuda.rules
  - $RULE_PATH/bash.rules
  - $RULE_PATH/bind.rules
  - $RULE_PATH/carbonblack.rules
  - $RULE_PATH/bonding.rules
  - $RULE_PATH/bro-ids.rules
  - $RULE_PATH/cacti-thold.rules
  #- $RULE_PATH/cisco-acs.rules
  - $RULE_PATH/cisco-ise.rules
  - $RULE_PATH/cisco-cucm.rules
  - $RULE_PATH/cisco-ios.rules
  - $RULE_PATH/cisco-meraki.rules
  - $RULE_PATH/cisco-pixasa.rules
  #- $RULE_PATH/cisco-prime.rules
  #- $RULE_PATH/cisco-sdee.rules
  - $RULE_PATH/cisco-wlc.rules
  - $RULE_PATH/citrix.rules
  - $RULE_PATH/courier.rules
  - $RULE_PATH/cylance.rules
  #- $RULE_PATH/deleted.rules
  #- $RULE_PATH/digitalpersona.rules
  - $RULE_PATH/dovecot.rules
  - $RULE_PATH/f5-big-ip.rules
  - $RULE_PATH/fatpipe.rules
  - $RULE_PATH/fipaypin.rules
  - $RULE_PATH/fortinet.rules
  - $RULE_PATH/ftpd.rules
  #- $RULE_PATH/grsec.rules
  - $RULE_PATH/honeyd.rules
  #- $RULE_PATH/hordeimp.rules
  #- $RULE_PATH/hostapd.rules
  - $RULE_PATH/huawei.rules
  - $RULE_PATH/imapd.rules
  - $RULE_PATH/ipop3d.rules
  - $RULE_PATH/juniper.rules
  #- $RULE_PATH/kismet.rules
  - $RULE_PATH/knockd.rules
  - $RULE_PATH/linux-kernel.rules
  - $RULE_PATH/milter.rules
  - $RULE_PATH/mongodb.rules
  - $RULE_PATH/mysql.rules
  - $RULE_PATH/nexpose.rules
  - $RULE_PATH/nfcapd.rules
  - $RULE_PATH/nginx.rules
  - $RULE_PATH/ntp.rules
  - $RULE_PATH/openssh.rules
  - $RULE_PATH/openvpn.rules
  - $RULE_PATH/oracle.rules
  #- $RULE_PATH/ossec-mi.rules
  #- $RULE_PATH/ossec.rules
  - $RULE_PATH/palo-alto.rules
  - $RULE_PATH/php.rules
  - $RULE_PATH/postfix.rules
  - $RULE_PATH/postgresql.rules
  - $RULE_PATH/pptp.rules
  - $RULE_PATH/procurve.rules
  - $RULE_PATH/proftpd.rules
  - $RULE_PATH/pure-ftpd.rules
  - $RULE_PATH/racoon.rules
  - $RULE_PATH/riverbed.rules
  - $RULE_PATH/roundcube.rules
  - $RULE_PATH/rsync.rules
  - $RULE_PATH/samba.rules
  - $RULE_PATH/sendmail.rules
  - $RULE_PATH/snort.rules
  - $RULE_PATH/solaris.rules
  - $RULE_PATH/sonicwall.rules
  - $RULE_PATH/squid.rules
  - $RULE_PATH/ssh-tectia-server.rules
  - $RULE_PATH/su.rules
  - $RULE_PATH/symantec-ems.rules
  - $RULE_PATH/syslog.rules
  - $RULE_PATH/tcp.rules
  - $RULE_PATH/telnet.rules
  - $RULE_PATH/trendmicro.rules
  - $RULE_PATH/tripwire.rules
  - $RULE_PATH/vmpop3d.rules
  - $RULE_PATH/vmware.rules
  - $RULE_PATH/vpopmail.rules
  - $RULE_PATH/vsftpd.rules
  - $RULE_PATH/web-attack.rules
  #- $RULE_PATH/weblabrinth.rules
  - $RULE_PATH/windows-applocker.rules
  - $RULE_PATH/windows-auth.rules
  - $RULE_PATH/windows-emet.rules
  - $RULE_PATH/windows-misc.rules
  - $RULE_PATH/windows-mssql.rules
  - $RULE_PATH/windows-security.rules
  - $RULE_PATH/windows-owa.rules
  - $RULE_PATH/windows.rules
  - $RULE_PATH/windows-sysmon.rules
  - $RULE_PATH/wordpress.rules
  - $RULE_PATH/xinetd.rules
  - $RULE_PATH/yubikey.rules
  - $RULE_PATH/zeus.rules
  - $RULE_PATH/zimbra.rules

#
# Include other configs
#

# Includes.  Files included here will be handled as if they were
# inlined in this configuration file.

#include: "/usr/local/etc/include1.yaml"
#include: "$RULE_PATH/include2.yaml"
